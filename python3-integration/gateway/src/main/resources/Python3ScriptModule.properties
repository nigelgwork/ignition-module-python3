# Python 3 Integration Scripting Functions Documentation

# exec function
exec.desc=Execute Python 3 code. Set a 'result' variable in your code to return a value.
exec.param.code=Python 3 code to execute
exec.returns=Result of the execution (value of 'result' variable or all local variables)

# exec with variables
exec.desc=Execute Python 3 code with provided variables. Set a 'result' variable in your code to return a value.
exec.param.code=Python 3 code to execute
exec.param.variables=Dictionary of variables to pass to Python scope
exec.returns=Result of the execution (value of 'result' variable or all local variables)

# eval function
eval.desc=Evaluate a Python 3 expression and return the result
eval.param.expression=Python 3 expression to evaluate
eval.returns=Result of the expression

# eval with variables
eval.desc=Evaluate a Python 3 expression with provided variables and return the result
eval.param.expression=Python 3 expression to evaluate
eval.param.variables=Dictionary of variables to pass to Python scope
eval.returns=Result of the expression

# callModule function
callModule.desc=Call a function from a Python 3 module
callModule.param.moduleName=Module name (e.g., "math", "numpy", "pandas")
callModule.param.functionName=Function name to call
callModule.param.args=List of positional arguments
callModule.returns=Result of the function call

# callModule with kwargs
callModule.desc=Call a function from a Python 3 module with keyword arguments
callModule.param.moduleName=Module name (e.g., "math", "numpy", "pandas")
callModule.param.functionName=Function name to call
callModule.param.args=List of positional arguments
callModule.param.kwargs=Dictionary of keyword arguments
callModule.returns=Result of the function call

# isAvailable function
isAvailable.desc=Check if Python 3 is available and the process pool is healthy
isAvailable.returns=True if Python 3 is available, False otherwise

# getVersion function
getVersion.desc=Get Python 3 version information
getVersion.returns=Dictionary with version information (version, available, error)

# getPoolStats function
getPoolStats.desc=Get statistics about the Python 3 process pool
getPoolStats.returns=Dictionary with pool statistics (totalSize, available, inUse, healthy)

# example function
example.desc=Execute a simple Python 3 example for testing (calculates 2^100)
example.returns=Example result string

# callScript function
callScript.desc=Call a saved Python 3 script by path. Scripts can access 'args' and 'kwargs' variables. The 'result' variable will be returned.
callScript.param.scriptPath=Path to the script (e.g., "My Script" or "Folder/My Script")
callScript.returns=The value of the 'result' variable from the script

# callScript with arguments
callScript.desc=Call a saved Python 3 script by path with arguments. Scripts can access 'args' and 'kwargs' variables. The 'result' variable will be returned.
callScript.param.scriptPath=Path to the script (e.g., "My Script" or "Folder/My Script")
callScript.param.args=List of positional arguments to pass to the script (accessible as 'args' variable)
callScript.param.kwargs=Dictionary of keyword arguments to pass to the script (accessible as 'kwargs' variable)
callScript.returns=The value of the 'result' variable from the script

# getAvailableScripts function (NEW v2.0.24)
getAvailableScripts.desc=Get list of all available saved scripts with metadata. Useful for building script selection UIs and autocomplete helpers.
getAvailableScripts.returns=List of script metadata dictionaries, each containing: name, description, path, author, version, lastModified
